{% extends 'main/layout.html.twig' %}

{% block content %}
<div class="container mt-4">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h3><i class="fas fa-comments mr-2"></i> Care Team Conversations</h3>
    <div class="d-flex gap-2">
      <span class="badge badge-primary" id="unreadBadge">0 Unread</span>
      <button class="btn btn-primary btn-sm" onclick="loadConversations()">
        <i class="fas fa-sync-alt me-1"></i>Refresh
      </button>
    </div>
  </div>

  <div class="row">
    <div class="col-md-8">
      <div class="card">
        <div class="card-header">
          <h5 class="mb-0">Conversations</h5>
        </div>
        <div class="card-body">
          <div id="conversationsContainer">
            <div class="text-muted">Loading conversations...</div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-md-4">
      <div class="card">
        <div class="card-header">
          <h5 class="mb-0">Quick Actions</h5>
        </div>
        <div class="card-body">
          <button class="btn btn-success btn-block mb-2" onclick="showCreateConversationForm()">
            <i class="fas fa-plus me-1"></i>Start New Conversation
          </button>
          <button class="btn btn-outline-secondary btn-block" onclick="loadConversations()">
            <i class="fas fa-sync-alt me-1"></i>Refresh All
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Conversation Detail Modal -->
<div class="modal fade" id="conversationModal" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="conversationTitle">Conversation</h5>
        <button type="button" class="close" data-dismiss="modal">
          <span>&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div id="conversationMessages" style="max-height: 400px; overflow-y: auto;">
          <div class="text-muted">Loading messages...</div>
        </div>
        <div class="mt-3">
          <div class="input-group">
            <textarea class="form-control" id="replyMessage" placeholder="Type your reply..." rows="3"></textarea>
            <div class="input-group-append">
              <button class="btn btn-primary" onclick="sendReply()">
                <i class="fas fa-paper-plane"></i>
              </button>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-warning" onclick="closeConversation()">
          <i class="fas fa-lock me-1"></i>Close Conversation
        </button>
      </div>
    </div>
  </div>
</div>

<script>
let currentConversationId = null;

document.addEventListener('DOMContentLoaded', () => {
  loadConversations();
  refreshUnread();
  setInterval(refreshUnread, 15000);
});

async function loadConversations() {
  const container = document.getElementById('conversationsContainer');
  container.innerHTML = '<div class="text-muted">Loading conversations...</div>';
  try {
    const res = await fetch('/api/conversations/inbox', { credentials: 'include' });
    const json = await res.json();
    if (!json.success) throw new Error(json.message || 'Failed to load conversations');
    if (!json.data || json.data.length === 0) {
      container.innerHTML = '<div class="text-muted">No conversations.</div>';
      return;
    }
    container.innerHTML = json.data.map(renderConversation).join('');
  } catch (e) {
    container.innerHTML = `<div class="text-danger">${e.message}</div>`;
  }
}

function renderConversation(c) {
  const lastMessageDate = new Date(c.lastMessageAt?.$date || c.lastMessageAt);
  const when = isNaN(lastMessageDate.getTime()) ? '' : `${lastMessageDate.toLocaleDateString()} ${lastMessageDate.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'})}`;
  const unread = c.hasUnreadForStaff;
  const statusClass = c.status === 'closed' ? 'text-muted' : c.status === 'archived' ? 'text-secondary' : 'text-primary';
  
  return `
    <div class="mb-3 p-3 border rounded ${unread ? 'bg-light border-primary' : ''}" onclick="openConversation('${c.id}')" style="cursor: pointer;">
      <div class="d-flex justify-content-between align-items-start">
        <div class="flex-grow-1">
          <div class="d-flex align-items-center mb-1">
            <strong class="me-2">${escapeHtml(c.subject || 'Untitled Conversation')}</strong>
            <span class="badge badge-${c.status === 'active' ? 'success' : c.status === 'closed' ? 'secondary' : 'warning'}">${c.status}</span>
            ${unread ? '<span class="badge badge-primary ml-1">Unread</span>' : ''}
          </div>
          <div class="text-muted small">Patient ID: ${c.patientId}</div>
          <div class="text-muted small">${c.messageCount} message${c.messageCount !== 1 ? 's' : ''}</div>
          ${c.lastMessagePreview ? `<div class="mt-1 text-muted small">${escapeHtml(c.lastMessagePreview)}</div>` : ''}
        </div>
        <div class="text-right">
          <div class="text-muted small">${when}</div>
        </div>
      </div>
    </div>
  `;
}

async function openConversation(conversationId) {
  currentConversationId = conversationId;
  
  // Show modal
  $('#conversationModal').modal('show');
  
  // Load conversation details
  try {
    const res = await fetch(`/api/conversations/${conversationId}/messages`, { credentials: 'include' });
    const json = await res.json();
    if (json.success) {
      document.getElementById('conversationTitle').textContent = `Conversation ${conversationId}`;
      document.getElementById('conversationMessages').innerHTML = json.data.map(renderMessage).join('');
      
      // Mark as read
      await markConversationAsRead(conversationId);
    } else {
      document.getElementById('conversationMessages').innerHTML = `<div class="text-danger">${json.message}</div>`;
    }
  } catch (e) {
    document.getElementById('conversationMessages').innerHTML = `<div class="text-danger">Failed to load messages: ${e.message}</div>`;
  }
}

function renderMessage(m) {
  const date = new Date(m.createdAt?.$date || m.createdAt);
  const when = isNaN(date.getTime()) ? '' : `${date.toLocaleDateString()} ${date.toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'})}`;
  const isStaff = m.direction === 'to_patient';
  const indentClass = m.threadLevel > 0 ? `ml-${Math.min(m.threadLevel * 3, 12)}` : '';
  
  return `
    <div class="mb-3 p-3 border rounded ${indentClass} ${isStaff ? 'bg-light' : ''}">
      <div class="d-flex justify-content-between align-items-start">
        <div class="flex-grow-1">
          <div class="d-flex align-items-center mb-1">
            <strong class="me-2">${escapeHtml(m.senderName || 'Unknown')}</strong>
            <span class="badge badge-${isStaff ? 'primary' : 'success'}">${isStaff ? 'Staff' : 'Patient'}</span>
            ${m.threadLevel > 0 ? '<span class="badge badge-secondary ml-1">Reply</span>' : ''}
          </div>
          <div class="mt-2">${escapeHtml(m.body || '')}</div>
        </div>
        <div class="text-right">
          <div class="text-muted small">${when}</div>
        </div>
      </div>
    </div>
  `;
}

async function sendReply() {
  if (!currentConversationId) return;
  
  const message = document.getElementById('replyMessage').value.trim();
  if (!message) return;
  
  try {
    const res = await fetch(`/api/conversations/${currentConversationId}/reply`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'include',
      body: JSON.stringify({ body: message })
    });
    
    const json = await res.json();
    if (json.success) {
      document.getElementById('replyMessage').value = '';
      // Reload conversation messages
      await openConversation(currentConversationId);
      // Reload conversations list
      await loadConversations();
      await refreshUnread();
    } else {
      alert(json.message || 'Failed to send reply');
    }
  } catch (e) {
    alert('Failed to send reply: ' + e.message);
  }
}

async function markConversationAsRead(conversationId) {
  try {
    await fetch(`/api/conversations/${conversationId}/read`, { 
      method: 'POST', 
      credentials: 'include' 
    });
  } catch (_) {}
}

async function closeConversation() {
  if (!currentConversationId) return;
  
  if (!confirm('Are you sure you want to close this conversation?')) return;
  
  try {
    const res = await fetch(`/api/conversations/${currentConversationId}/close`, {
      method: 'POST',
      credentials: 'include'
    });
    
    const json = await res.json();
    if (json.success) {
      $('#conversationModal').modal('hide');
      await loadConversations();
    } else {
      alert(json.message || 'Failed to close conversation');
    }
  } catch (e) {
    alert('Failed to close conversation: ' + e.message);
  }
}

function showCreateConversationForm() {
  // This would open a form to create a new conversation
  // For now, just show an alert
  alert('Create conversation feature coming soon!');
}

async function refreshUnread() {
  try {
    const res = await fetch('/api/conversations/inbox/unread-count', { credentials: 'include' });
    const json = await res.json();
    if (json.success) {
      const n = json.count ?? 0;
      document.getElementById('unreadBadge').textContent = `${n} Unread`;
      const navBadge = document.getElementById('navMessagesBadge');
      if (navBadge) navBadge.textContent = n > 0 ? String(n) : '';
    }
  } catch (_) {}
}

function escapeHtml(str){
  if (typeof str !== 'string') return '';
  return str.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;').replace(/'/g,'&#039;');
}
</script>
{% endblock %}


