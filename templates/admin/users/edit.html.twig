{% extends 'admin/users/base.html.twig' %}

{% block title %}Edit User - SecureHealth{% endblock %}

{% block body %}
    <div class="container my-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>
                <i class="fas fa-user-edit me-2"></i>
                Edit User
            </h1>
            <a href="{{ path('admin_users_index') }}" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-1"></i>
                Back to User List
            </a>
        </div>

        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label }} alert-dismissible fade show">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}
        {% endfor %}

        <div class="card shadow-sm mb-4">
            <div class="card-header bg-white d-flex justify-content-between align-items-center">
                <strong>User Information</strong>
                <span class="badge bg-secondary">ID: {{ user.id }}</span>
            </div>
            <div class="card-body">
                <form action="{{ path('admin_users_edit', {'id': user.id}) }}" method="post" id="editUserForm" class="needs-validation" novalidate>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="email" class="form-label">Email Address</label>
                            <input type="email" class="form-control" id="email" value="{{ user.email }}" readonly>
                            <small class="text-muted">Email address cannot be changed</small>
                        </div>
                        <div class="col-md-6">
                            <label for="username" class="form-label">Full Name</label>
                            <input type="text" class="form-control" id="username" name="username" value="{{ user.username }}" required>
                            <div class="invalid-feedback">
                                Please provide a username.
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="password" class="form-label">New Password</label>
                            <input type="password" class="form-control" id="password" name="password">
                            <small class="text-muted">Leave blank to keep current password</small>
                        </div>
                        <div class="col-md-6">
                            <label for="confirmPassword" class="form-label">Confirm New Password</label>
                            <input type="password" class="form-control" id="confirmPassword">
                            <div id="passwordMismatch" class="invalid-feedback">
                                Passwords do not match.
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">User Roles</label>
                        <div class="border p-3 rounded">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="role_admin" name="roles[]" value="ROLE_ADMIN" 
                                       {{ 'ROLE_ADMIN' in user.roles ? 'checked' : '' }}>
                                <label class="form-check-label" for="role_admin">
                                    <span class="badge bg-danger me-1">ADMIN</span> Administrator
                                    <small class="text-muted ms-2">Full system access and management</small>
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="role_doctor" name="roles[]" value="ROLE_DOCTOR" 
                                       {{ 'ROLE_DOCTOR' in user.roles ? 'checked' : '' }}>
                                <label class="form-check-label" for="role_doctor">
                                    <span class="badge bg-primary me-1">DOCTOR</span> Doctor
                                    <small class="text-muted ms-2">Full patient access, diagnosis, treatment</small>
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="role_nurse" name="roles[]" value="ROLE_NURSE" 
                                       {{ 'ROLE_NURSE' in user.roles ? 'checked' : '' }}>
                                <label class="form-check-label" for="role_nurse">
                                    <span class="badge bg-success me-1">NURSE</span> Nurse
                                    <small class="text-muted ms-2">Patient vitals, medications, care</small>
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="role_receptionist" name="roles[]" value="ROLE_RECEPTIONIST" 
                                       {{ 'ROLE_RECEPTIONIST' in user.roles ? 'checked' : '' }}>
                                <label class="form-check-label" for="role_receptionist">
                                    <span class="badge bg-info me-1">RECEPTIONIST</span> Receptionist
                                    <small class="text-muted ms-2">Scheduling, basic patient info</small>
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="role_patient" name="roles[]" value="ROLE_PATIENT" 
                                       {{ 'ROLE_PATIENT' in user.roles ? 'checked' : '' }}>
                                <label class="form-check-label" for="role_patient">
                                    <span class="badge bg-warning text-dark me-1">PATIENT</span> Patient
                                    <small class="text-muted ms-2">Self-service patient portal access</small>
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="role_inactive" name="roles[]" value="ROLE_INACTIVE" 
                                       {{ 'ROLE_INACTIVE' in user.roles ? 'checked' : '' }}>
                                <label class="form-check-label" for="role_inactive">
                                    <span class="badge bg-dark me-1">INACTIVE</span> Inactive Account
                                    <small class="text-muted ms-2">User cannot log in when this role is assigned</small>
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="role_user" name="roles[]" value="ROLE_USER" checked disabled>
                                <input type="hidden" name="roles[]" value="ROLE_USER">
                                <label class="form-check-label" for="role_user">
                                    <span class="badge bg-secondary me-1">USER</span> Basic User
                                    <small class="text-muted ms-2">Default role (always assigned)</small>
                                </label>
                            </div>
                            <div class="invalid-feedback role-feedback" style="display: none;">
                                Please select at least one role.
                            </div>
                        </div>
                    </div>

                    <div class="mt-4">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-1"></i>
                            Update User
                        </button>
                        <a href="{{ path('admin_users_index') }}" class="btn btn-outline-secondary ms-2">Cancel</a>
                    </div>
                </form>
            </div>
        </div>
        
        <div class="card shadow-sm border-danger">
            <div class="card-header bg-white text-danger">
                <strong>Danger Zone</strong>
            </div>
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="mb-1">Deactivate User Account</h5>
                        <p class="mb-0 text-muted">
                            This will prevent the user from logging in but keep their account data.
                        </p>
                    </div>
                    {% set isActive = 'ROLE_INACTIVE' not in user.roles %}
                    <form action="{{ path('admin_users_toggle_status', {'id': user.id}) }}" method="post">
                        <button type="submit" class="btn {{ isActive ? 'btn-danger' : 'btn-success' }}" 
                                onclick="return confirm('Are you sure you want to {{ isActive ? 'deactivate' : 'activate' }} this user?');">
                            <i class="fas {{ isActive ? 'fa-user-slash' : 'fa-user-check' }} me-1"></i> 
                            {{ isActive ? 'Deactivate User' : 'Activate User' }}
                        </button>
                    </form>
                </div>
                <hr>
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="mb-1">Reset User Password</h5>
                        <p class="mb-0 text-muted">
                            Generate a new password for this user.
                        </p>
                    </div>
                    <button class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#resetPasswordModal">
                        <i class="fas fa-key me-1"></i> Reset Password
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Reset Password Modal -->
    <div class="modal fade" id="resetPasswordModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Reset Password for {{ user.username }}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="resetPassword" class="form-label">New Password</label>
                        <input type="password" class="form-control" id="resetPassword" required>
                    </div>
                    <div class="mb-3">
                        <label for="resetConfirmPassword" class="form-label">Confirm Password</label>
                        <input type="password" class="form-control" id="resetConfirmPassword" required>
                        <div id="resetPasswordMismatch" class="invalid-feedback">Passwords do not match</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="resetPasswordBtn">Reset Password</button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('editUserForm');
            const password = document.getElementById('password');
            const confirmPassword = document.getElementById('confirmPassword');
            const passwordMismatch = document.getElementById('passwordMismatch');
            const roleCheckboxes = document.querySelectorAll('input[name="roles[]"]:not([disabled])');
            const roleFeedback = document.querySelector('.role-feedback');
            
            // Form validation
            form.addEventListener('submit', function(event) {
                let isValid = true;
                
                // Check password match if a new password is being set
                if (password.value) {
                    if (password.value !== confirmPassword.value) {
                        passwordMismatch.style.display = 'block';
                        confirmPassword.classList.add('is-invalid');
                        isValid = false;
                    } else {
                        passwordMismatch.style.display = 'none';
                        confirmPassword.classList.remove('is-invalid');
                    }
                }
                
                // Check if at least one role is selected
                const hasRole = Array.from(roleCheckboxes).some(checkbox => checkbox.checked);
                if (!hasRole) {
                    roleFeedback.style.display = 'block';
                    isValid = false;
                } else {
                    roleFeedback.style.display = 'none';
                }
                
                if (!isValid) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                
                form.classList.add('was-validated');
            });
            
            // Password confirmation validation
            confirmPassword.addEventListener('input', function() {
                if (password.value && password.value !== confirmPassword.value) {
                    passwordMismatch.style.display = 'block';
                    confirmPassword.classList.add('is-invalid');
                } else {
                    passwordMismatch.style.display = 'none';
                    confirmPassword.classList.remove('is-invalid');
                }
            });
            
            // Role selection validation
            roleCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const hasRole = Array.from(roleCheckboxes).some(cb => cb.checked);
                    if (!hasRole) {
                        roleFeedback.style.display = 'block';
                    } else {
                        roleFeedback.style.display = 'none';
                    }
                });
            });
            
            // Reset password modal functionality
            const resetPassword = document.getElementById('resetPassword');
            const resetConfirmPassword = document.getElementById('resetConfirmPassword');
            const resetPasswordMismatch = document.getElementById('resetPasswordMismatch');
            const resetPasswordBtn = document.getElementById('resetPasswordBtn');
            
            resetConfirmPassword.addEventListener('input', function() {
                if (resetPassword.value !== resetConfirmPassword.value) {
                    resetPasswordMismatch.style.display = 'block';
                    resetConfirmPassword.classList.add('is-invalid');
                    resetPasswordBtn.disabled = true;
                } else {
                    resetPasswordMismatch.style.display = 'none';
                    resetConfirmPassword.classList.remove('is-invalid');
                    resetPasswordBtn.disabled = false;
                }
            });
            
            resetPasswordBtn.addEventListener('click', async function() {
                if (resetPassword.value !== resetConfirmPassword.value) {
                    resetPasswordMismatch.style.display = 'block';
                    resetConfirmPassword.classList.add('is-invalid');
                    return;
                }
                
                try {
                    const response = await fetch(`/admin/users/{{ user.id }}/reset-password`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: `password=${encodeURIComponent(resetPassword.value)}`
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        // Close the modal
                        const resetPasswordModal = document.getElementById('resetPasswordModal');
                        bootstrap.Modal.getInstance(resetPasswordModal).hide();
                        
                        // Show success message
                        const alert = document.createElement('div');
                        alert.className = 'alert alert-success alert-dismissible fade show';
                        alert.innerHTML = `
                            Password reset successfully
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        `;
                        document.querySelector('.container').prepend(alert);
                    } else {
                        // Show error message in modal
                        alert('Error: ' + result.message);
                    }
                } catch (error) {
                    console.error('Error resetting password:', error);
                    alert('An error occurred while resetting the password');
                }
            });
        });
    </script>
{% endblock %}