parameters:
    mongodb_url: '%env(resolve:MONGODB_URI)%'
    mongodb_db: '%env(resolve:MONGODB_DB)%'
    mongodb_key_vault_namespace: '%env(resolve:MONGODB_KEY_VAULT_NAMESPACE)%'
    mongodb_encryption_key_path: '%env(resolve:MONGODB_ENCRYPTION_KEY_PATH)%'
    mongodb_disabled: '%env(bool:MONGODB_DISABLED)%'

services:
    _defaults:
        autowire: true
        autoconfigure: true

    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            
    # Import mock services when MongoDB is disabled
    App\Repository\MockUserRepository:
        arguments:
            $logger: '@logger'
            
    # Use encrypted MongoDB client for HIPAA compliance
    MongoDB\Client:
        factory: ['@App\Factory\MongoDBConnectionFactory', 'createEncryptedClient']
        arguments: ['%env(resolve:MONGODB_URI)%']
        public: false

    # Robust MongoDB service for handling replica set issues
    App\Service\RobustMongoDBService:
        arguments:
            $connectionString: '%env(resolve:MONGODB_URI)%'
            $databaseName: '%env(resolve:MONGODB_DB)%'

    # Medical Knowledge Services
    App\Service\EmbeddingService:
        public: true
        arguments:
            $openaiApiKey: '%env(OPENAI_API_KEY)%'
            $openaiApiUrl: '%env(OPENAI_API_URL)%'

    App\Service\MedicalKnowledgeService:
        arguments:
            $repository: '@App\Repository\MedicalKnowledgeRepository'
            $embeddingService: '@App\Service\EmbeddingService'
            $logger: '@logger'

    App\Service\VectorSearchService:
        public: true
        arguments:
            $knowledgeRepository: '@App\Repository\MedicalKnowledgeRepository'
            $embeddingService: '@App\Service\EmbeddingService'
            $logger: '@logger'

    App\Service\AIDocumentationService:
        arguments:
            $logger: '@logger'
            $openaiApiKey: '%env(OPENAI_API_KEY)%'
            $openaiApiUrl: '%env(OPENAI_API_URL)%'
            $openaiModel: 'gpt-4'

    App\Repository\MedicalKnowledgeRepository:
        arguments:
            $dm: '@doctrine_mongodb.odm.default_document_manager'
            $encryptionService: '@App\Service\MongoDBEncryptionService'

    # RAG Knowledge Base Command
    App\Command\IndexKnowledgeBaseCommand:
        arguments:
            $mongoClient: '@MongoDB\Client'
            $projectDir: '%kernel.project_dir%'
            $openaiApiKey: '%env(OPENAI_API_KEY)%'

    # RAG Chatbot Service
    App\Service\RAGChatbotService:
        public: true
        arguments:
            $openaiApiKey: '%env(OPENAI_API_KEY)%'
            $mongoClient: '@MongoDB\Client'
            $patientRepo: '@App\Repository\PatientRepository'
            $authChecker: '@security.authorization_checker'
            $auditLog: '@App\Service\AuditLogService'
            $encryption: '@App\Service\MongoDBEncryptionService'
            $vectorSearch: '@App\Service\VectorSearchService'

    # Make SessionAuthenticator public to prevent inlining
    App\Security\SessionAuthenticator:
        public: true

    # Make JsonLoginAuthenticator public to prevent inlining
    App\Security\JsonLoginAuthenticator:
        public: true

    # Make SessionUserProvider public to prevent inlining
    App\Security\SessionUserProvider:
        public: true

    # Make DocumentUserProvider public to prevent inlining
    App\Security\DocumentUserProvider:
        public: true

